CONSTRUCTORS

A : Value
B : Value

cons : Value * List -> List
nil : List

pair : List * List -> Pair

FUNCTIONS

split : List * List * List -> Pair

mergeP : Pair [- cons(B(), cons(A(), l))] -> List [- cons(B(), cons(A(), l))]
       | Pair [- cons(A(), l)] -> List [- cons(A(), l)]

sort : List -> List [- cons(B(), cons(A(), l))]
sortP : Pair -> Pair [- cons(B(), cons(A(), l))]

RULES

split(nil(), l1, l2) -> pair(l1, l2)
split(cons(x, nil()), l1, l2) -> pair(cons(x, l1), l2)
split(cons(x, cons(y, l)), l1, l2) -> split(l, cons(x, l1), cons(y,l2))

mergeP(pair(nil(), l)) -> l
mergeP(pair(l, nil())) -> l
mergeP(pair(cons(A(), l1), l2)) -> cons(A(), mergeP(pair(l1, l2)))
mergeP(pair(l1, cons(A(), l2))) -> cons(A(), mergeP(pair(l1, l2)))
mergeP(pair(cons(B(), l1), cons(B(), l2))) -> cons(B(), mergeP(pair(cons(B(), l1), l2)))

sort(nil()) -> nil()
sort(cons(x, nil())) -> cons(x, nil())
sort(cons(x, cons(y, l))) -> mergeP(sortP(split(cons(x, cons(y, l)))))

sortP(pair(l1, l2)) -> pair()
