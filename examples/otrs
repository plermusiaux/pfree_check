CONSTRUCTORS

string : String

sig : String * Nat * Signature -> Signature
empty : Signature

nil : TermList
cons : Term * TermList -> TermList

lin : TermRList
snoc : Term * TermRList -> TermRList

bot : Term
var : String -> Term
appl : String * TermList -> Term
plus : Term * Term -> Term

z : Nat
s : Nat -> Nat

FUNCTIONS

add : Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ] * Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ] -> Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ]

removePlus : Term -> TermList [- plus(t1,t2) ]
complement : Signature * Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ] * Term -> Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ]

generate : Signature -> Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ]
build : String * Nat * TermList [- bot() ] -> Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ]

interleave : String * TermList [- bot() ] * TermList * TermRList [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ] * Signature -> Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ]

collectPlus : Term * TermList [- plus(t1,t2) ] -> TermList [- plus(t1,t2) ]
split : String * TermList [- plus(t1,t2) ] * TermList * TermRList [- plus(t1,t2) ]  -> TermList [- plus(t1,t2) ]
reverse : TermRList [- plus(t1,t2) ] -> TermList [- plus(t1,t2) ]
concat : TermList [- plus(t1,t2) ] * TermList [- plus(t1,t2) ]  -> TermList [- plus(t1,t2) ]

RULES

add(bot(), u) -> u
add(u, bot()) -> u
add(var(s1), var(s2)) -> plus(var(s1), var(s2))
add(var(s1), appl(g,l2)) -> plus(var(s1), appl(g,l2))
add(var(s1), plus(v1,v2)) -> plus(var(s1), plus(v1,v2))
add(appl(f,l1), var(s2)) -> plus(appl(f,l1), var(s2))
add(appl(f,l1), appl(g,l2)) -> plus(appl(f,l1), appl(g,l2))
add(appl(f,l1), plus(v1,v2)) -> plus(appl(f,l1), plus(v1,v2))
add(plus(u1,u2), var(s2)) -> plus(plus(u1,u2), var(s2))
add(plus(u1,u2), appl(g,l2)) -> plus(plus(u1,u2), appl(g,l2))
add(plus(u1,u2), plus(v1,v2)) -> plus(plus(u1,u2), plus(v1,v2))

complement(sig, u, var(s)) -> bot()
complement(sig, u, bot()) -> u
complement(sig, u, plus(v1,v2)) -> complement(sig, complement(sig,u,v1), v2)
complement(sig, var(s), appl(f,l)) -> complement(sig, generate(sig), appl(f,l))
complement(sig, bot(), appl(f, l)) -> bot()
complement(sig, plus(u1,u2), appl(f,l)) -> add(complement(sig, u1, appl(f,l)), complement(sig, u2, appl(f,l)))
complement(sig, appl(f,l1), appl(f,l2)) -> interleave(f, l1, l2, nil())
complement(sig, appl(g,l1), appl(f,l2)) -> appl(f,l1)

generate(sig(f,n,sig)) -> add(build(f,n,nil()), generate(sig))
generate(empty()) -> bot()

build(f, z(), l) -> appl(f, l)
build(f, s(n), l) -> build(f, n, cons(var(string()), l))

interleave(f, nil(), nil(), lin()) -> bot()
interleave(f, cons(u1,l1), cons(u2, nil()), l, sig) -> interleave(f, l1, nil(), snoc(complement(sig,u1,u2), l1), sig)
interleave(f, cons(u1,l1), cons(u2,l2), l, sig) -> add(interleave(f, l1, nil(), snoc(complement(sig,u1,u2), l1), sig), interleave(f, l1, l2, snoc(u1,l), sig))
interleave(f, l1, nil(), snoc(bot(), l), sig) -> bot()
interleave(f, l1, nil(), snoc(var(s), l), sig) -> interleave(f, cons(var(s), l1), nil(), l, sig)
interleave(f, l1, nil(), snoc(appl(g,tl), l), sig) -> interleave(f, cons(appl(g,tl), l1), nil(), l, sig)
interleave(f, l1, nil(), snoc(plus(u1,u2), l), sig) -> interleave(f, cons(plus(u1,u2), l1), nil(), l, sig)
interleave(f, l1, nil(), lin(), sig) -> appl(f,l1)


removePlus(t) -> collectPlus(t, nil())

split(f, cons(t,lt), nil(), l) -> cons(appl(f, reverse(snoc(t, l))), split(f, lt, nil(), l))
split(f, cons(t,lt), l1, l2) -> concat(split(f,lt,l1,l2), split(f, nil(), l1, snoc(t, l2)))
split(f, nil(), cons(u,l1), l2) -> split(f, removePlus(u), l1, l2)
split(f, nil(), nil(), l) -> nil()

collectPlus(plus(u1, u2), l) -> concat(collectPlus(u1, nil()), collectPlus(u2, l))
collectPlus(appl(f, tl), l) -> concat(split(f, nil(), tl, lin()),l)
collectPlus(var(s), l) -> cons(var(s),l)
collectPlus(bot(), l) -> l

concat(cons(u,l1), l2) -> cons(u,concat(l1,l2))
concat(nil(), l) -> l
