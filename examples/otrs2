CONSTRUCTORS

name : Nat -> Name

sig : Name * Nat * Signature -> Signature
empty : Signature

nil : TermList
cons : Term * TermList -> TermList

bot : Term
var : Name -> Term
appl : Name * TermList -> Term
plus : Term * Term -> Term

z : Nat
s : Nat -> Nat

true : Bool
false : Bool

FUNCTIONS

eq : Nat * Nat -> Bool

ite : Bool * Term [- cons(bot(),tl) ] * Term [- cons(bot(),tl) ] -> Term [- cons(bot(),tl) ]
    | Bool * Term [- plus(bot(),v) ] * Term [- plus(bot(),v) ] -> Term [- plus(bot(),v) ]
    | Bool * Term [- plus(u,bot()) ] * Term [- plus(u,bot()) ] -> Term [- plus(u,bot()) ]
    | Bool * Term [- cons(plus(t1,t2),tl) ] * Term [- cons(plus(t1,t2),tl) ] -> Term [- cons(plus(t1,t2),tl) ]

add : Term [- cons(bot(),tl) ] * Term [- cons(bot(),tl) ] -> Term [- cons(bot(),tl) ]
    | Term [- plus(bot(),v) ] * Term [- plus(bot(),v) ] -> Term [- plus(bot(),v) ]
    | Term [- plus(u,bot()) ] * Term [- plus(u,bot()) ] -> Term [- plus(u,bot()) ]
    | Term [- cons(plus(t1,t2), tl) ] * Term [- cons(plus(t1,t2), tl) ] -> Term [- cons(plus(t1,t2), tl) ]

complement : Signature * Term * Term -> Term [- ( cons(bot()+plus(t1,t2),tl) + plus(bot(),v) + plus(u,bot()) ) ]

generate : Signature -> Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ]
build : Name * Nat * TermList [- bot() ] -> Term [- bot() ]

interleave : Name * TermList * TermList * TermList * Signature -> Term [- ( cons(bot()+plus(t1,t2),tl) + plus(bot(),v) + plus(u,bot()) ) ]

collectPlus : Term -> Term [- ( cons(bot()+plus(t1,t2),tl) + plus(bot(),v) + plus(u,bot()) ) ]

split : Name * Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ] * TermList * TermList [- bot() ]  -> Term [- ( cons(bot(),tl) + plus(bot(),v) + plus(u,bot()) ) ]
      | Name * Term [-  cons(plus(t1,t2),tl) ] * TermList * TermList [- plus(t1,t2) ]  -> Term [- cons(plus(t1,t2),tl) ]
reverse : TermList [- bot() ] * TermList [- bot() ] -> TermList [- bot() ]
        | TermList [- plus(t1,t2) ] * TermList [- plus(t1,t2) ] -> TermList [- plus(t1,t2) ]

RULES

add(bot(), u) -> u
add(u, bot()) -> u
add(u\bot(), v\bot()) -> plus(u, v)
// add(var(s1), var(s2)) -> plus(var(s1), var(s2))
// add(var(s1), appl(g,l2)) -> plus(var(s1), appl(g,l2))
// add(var(s1), plus(v1,v2)) -> plus(var(s1), plus(v1,v2))
// add(appl(f,l1), var(s2)) -> plus(appl(f,l1), var(s2))
// add(appl(f,l1), appl(g,l2)) -> plus(appl(f,l1), appl(g,l2))
// add(appl(f,l1), plus(v1,v2)) -> plus(appl(f,l1), plus(v1,v2))
// add(plus(u1,u2), var(s2)) -> plus(plus(u1,u2), var(s2))
// add(plus(u1,u2), appl(g,l2)) -> plus(plus(u1,u2), appl(g,l2))
// add(plus(u1,u2), plus(v1,v2)) -> plus(plus(u1,u2), plus(v1,v2))

complement(sig, u, var(s)) -> bot()
complement(sig, u, bot()) -> collectPlus(u)
complement(sig, u, plus(v1,v2)) -> complement(sig, complement(sig,u,v1), v2)
complement(sig, var(s), appl(f,l)) -> complement(sig, generate(sig), appl(f,l))
complement(sig, bot(), appl(f, l)) -> bot()
complement(sig, plus(u1,u2), appl(f,l)) -> add(complement(sig, u1, appl(f,l)), complement(sig, u2, appl(f,l)))
complement(sig, appl(name(f),l1), appl(name(g),l2)) -> ite(eq(f,g), interleave(name(f), l1, l2, nil(), sig), collectPlus(appl(name(f), l1)))

generate(sig(f,n,sig)) -> add(build(f,n,nil()), generate(sig))
generate(empty()) -> bot()

build(f, z(), l) -> appl(f, l)
build(f, s(n), l) -> build(f, n, cons(var(name(n)), l))

interleave(f, cons(u1,l1), cons(u2,l2), rl, sig) -> add(interleave(f, l1, nil(), cons(complement(sig, u1, u2), rl), sig), interleave(f, l1, l2, cons(u1,rl), sig))
interleave(f, cons(u1,l1), nil(), rl, sig) -> interleave(f, l1, nil(), cons(u1,rl), sig)
interleave(f, nil(), l2, cons(u, rl), sig) -> split(f, collectPlus(u), rl, nil())
interleave(f, nil(), l2, nil(), sig) -> bot()

split(f, plus(t1,t2), tl, rl) -> add(split(f, t1, tl, rl), split(f, t2, tl, rl))
split(f, bot(), tl, rl) -> bot()
split(f, t\(bot() + plus(t1,t2)), cons(u,tl), rl) -> split(f, collectPlus(u), tl, cons(t,rl))
// split(f, appl(g, ul), cons(u,tl), rl) -> split(f, collectPlus(u), tl, cons(appl(g,ul),rl))
// split(f, var(s), cons(u,tl), rl) -> split(f, collectPlus(u), tl, cons(var(s),rl))
split(f, t\(bot() + plus(t1,t2)), nil(), rl) -> appl(f, reverse(rl, cons(t, nil())))
// split(f, appl(g, ul), nil(), rl) -> appl(f, reverse(rl, cons(appl(g, ul), nil())))
// split(f, var(s), nil(), rl) -> appl(f, reverse(rl, cons(var(s), nil())))

collectPlus(plus(u1, u2)) -> add(collectPlus(u1),collectPlus(u2))
collectPlus(appl(f, nil())) -> appl(f, nil())
collectPlus(appl(f, cons(t, tl))) -> split(f, collectPlus(t), tl, nil())
collectPlus(var(s)) -> var(s)
collectPlus(bot()) -> bot()

reverse(cons(t,l), rl) -> reverse(l, cons(t, rl))
reverse(nil(), rl) -> rl
