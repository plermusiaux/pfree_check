CONSTRUCTORS

true : Bool
false : Bool

A : Value
B : Value

cons : Value * List -> List
nil : List

pair : List * List -> Pair

FUNCTIONS

leq : Value * Value [- A()] -> Bool [- false()]
    | Value [- B()] * Value -> Bool [- false()]
    | Value [- A()] * Value [- B()] -> Bool [- true()]

ite : Bool [- true()] * List * List [- cons(B(), cons(A(), l))] -> List [- cons(B(), cons(A(), l))] 
    | Bool [- false()] * List [- cons(B(), cons(A(), l))] * List -> List [- cons(B(), cons(A(), l))] 
    | Bool [- true()] * List * List [- cons(A(), l)] -> List [- cons(A(), l)] 
    | Bool [- false()] * List [- cons(A(), l)] * List -> List [- cons(A(), l)] 

split : List * List * List -> Pair

mergeP : Pair [- cons(B(), cons(A(), l))] -> List [- cons(B(), cons(A(), l))]
       | Pair [- cons(A(), l)] -> List [- cons(A(), l)]

sort : List -> List [- cons(B(), cons(A(), l))]
sortP : Pair -> Pair [- cons(B(), cons(A(), l))]

RULES

leq(x, B()) -> true()
leq(A(), y) -> true()
leq(B(), A()) -> false()

ite(true(), l1, l2) -> l1
ite(false(), l1, l2) -> l2

split(nil(), l1, l2) -> pair(l1, l2)
split(cons(x, nil()), l1, l2) -> pair(cons(x, l1), l2)
split(cons(x, cons(y, l)), l1, l2) -> split(l, cons(x, l1), cons(y,l2))

mergeP(pair(nil(), l)) -> l
mergeP(pair(l, nil())) -> l
mergeP(pair(cons(x, l1), cons(y, l2))) -> ite(leq(x, y), cons(x, mergeP(pair(l1, cons(y, l2)))), cons(y, mergeP(pair(cons(x, l1), l2))))

sort(nil()) -> nil()
sort(cons(x, nil())) -> cons(x, nil())
sort(cons(x, cons(y, l))) -> mergeP(sortP(split(cons(x, cons(y, l)), nil(), nil())))

sortP(pair(l1, l2)) -> pair(sort(l1), sort(l2))
