CONSTRUCTORS

true : Bool
false : Bool

A : Value
B : Value

cons : Value * List -> List
nil : List

pair : List * List -> Pair

FUNCTIONS

leq : Value * Value [- A()] -> Bool [- false()]
    | Value [- B()] * Value -> Bool [- false()]
    | Value [- A()] * Value [- B()] -> Bool [- true()]

ite : Bool [- true()] * List * List [- cons(B(), cons(A(), l))] -> List [- cons(B(), cons(A(), l))] 
    | Bool [- false()] * List [- cons(B(), cons(A(), l))] * List -> List [- cons(B(), cons(A(), l))] 
    | Bool [- true()] * List * List [- cons(A(), l)] -> List [- cons(A(), l)] 
    | Bool [- false()] * List [- cons(A(), l)] * List -> List [- cons(A(), l)] 

split : List * List * List -> Pair

mergeP : Pair [- cons(B(), cons(A(), l))] -> List [- cons(B(), cons(A(), l))]
       | Pair [- cons(A(), l)] -> List [- cons(A(), l)]

sort : List -> List [- cons(B(), cons(A(), l))]
sortP : Pair -> Pair [- cons(B(), cons(A(), l))]

RULES

leq(x, B()) -> true()
leq(A(), y) -> true()
leq(B(), A()) -> false()

ite(true(), l1, l2) -> l1
ite(false(), l1, l2) -> l2

split(nil(), l1, l2) -> pair(l1, l2)
split(cons(x, nil()), l1, l2) -> pair(cons(x, l1), l2)
split(cons(x, cons(y, l)), l1, l2) -> split(l, cons(x, l1), cons(y,l2))

mergeP(pair(nil(), l)) -> l
mergeP(pair(l, nil())) -> l
mergeP(pair(cons(x@(A()+B()), l1), cons(y@(A()+B()), l2))) -> ite(leq(x, y), cons(x, mergeP(pair(l1, cons(y, l2)))), cons(y, mergeP(pair(cons(x, l1), l2))))

sort(nil()) -> nil()
sort(cons(x, nil())) -> cons(x, nil())
sort(cons(x, cons(y, l))) -> mergeP(sortP(split(cons(x, cons(y, l)))))

sortP(pair(l1, l2)) -> pair()

// [(
// mergeP(pair(cons(x@x : Value[-cons(B(), cons(A(), l : List))], l1@(l1 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List))), cons(y@(y : Value[-cons(B(), cons(A(), l : List))] \ B()), l2@l2 : List[-cons(B(), cons(A(), l : List))]))) ->
//     ite(leq(x : Value[-cons(B(), cons(A(), l : List))], (y : Value[-cons(B(), cons(A(), l : List))] \ B())),
//     cons(x : Value[-cons(B(), cons(A(), l : List))],
//          mergeP(pair((l1 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List)),
//                      cons((y : Value[-cons(B(), cons(A(), l : List))] \ B()), l2 : List[-cons(B(), cons(A(), l : List))])))),
//     cons((y : Value[-cons(B(), cons(A(), l : List))] \ B()),
//          mergeP(pair(cons(x : Value[-cons(B(), cons(A(), l : List))], (l1 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List))),
//                      l2 : List[-cons(B(), cons(A(), l : List))])))) : List,
//     (cons(B(), cons(A(), l : List)),[_ : List])
//     
// ),(
// mergeP(pair(cons(x@x : Value[-cons(B(), cons(A(), l : List))], l1@(l1 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List))), cons(y@y : Value[-cons(B(), cons(A(), l : List))], l2@(l2 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List))))) ->
//     ite(leq(x : Value[-cons(B(), cons(A(), l : List))], y : Value[-cons(B(), cons(A(), l : List))]), cons(x : Value[-cons(B(), cons(A(), l : List))], mergeP(pair((l1 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List)), cons(y : Value[-cons(B(), cons(A(), l : List))], (l2 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List)))))), cons(y : Value[-cons(B(), cons(A(), l : List))], mergeP(pair(cons(x : Value[-cons(B(), cons(A(), l : List))], (l1 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List))), (l2 : List[-cons(B(), cons(A(), l : List))] \ cons(A(), l : List)))))) : List,
//     (cons(B(), cons(A(), l : List)),[_ : List]))]
